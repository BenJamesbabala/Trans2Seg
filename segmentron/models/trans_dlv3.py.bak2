import torch
import torch.nn as nn
import torch.nn.functional as F

from .segbase import SegBaseModel
from .model_zoo import MODEL_REGISTRY
from ..modules import _ConvBNReLU, SeparableConv2d, _ASPP, _FCNHead
from ..config import cfg
from ..modules import VisionTransformer
from IPython import embed


__all__ = ['DeepLabV3Plus']


@MODEL_REGISTRY.register(name='TransDLV3')
class TransDLV3(SegBaseModel):

    def __init__(self):
        super(TransDLV3, self).__init__()
        if self.backbone.startswith('mobilenet'):
            c1_channels = 24
            c4_channels = 320
        else:
            c1_channels = 256
            c4_channels = 2048

        vit_params = cfg.MODEL.TRANS_DLV3
        self.head = _Head(self.nclass, vit_params, c1_channels=c1_channels, c4_channels=c4_channels)
        if self.aux:
            self.auxlayer = _FCNHead(728, self.nclass)
        self.__setattr__('decoder', ['head', 'auxlayer'] if self.aux else ['head'])


    def forward(self, x):
        size = x.size()[2:]
        c1, c2, c3, c4 = self.encoder(x) # resnet50 backbone

        outputs = list()
        x = self.head(c4, c1)
        x = F.interpolate(x, size, mode='bilinear', align_corners=True)

        outputs.append(x)
        if self.aux:
            auxout = self.auxlayer(c3)
            auxout = F.interpolate(auxout, size, mode='bilinear', align_corners=True)
            outputs.append(auxout)
        return tuple(outputs)


class Transformer(nn.Module):
    def __init__(self, vit_params, c4_channels=2048, use_decoder=False):
        super().__init__()
        last_channels = vit_params['embed_dim']
        self.vit = VisionTransformer(input_dim=c4_channels,
                                     embed_dim=last_channels,
                                     depth=vit_params['depth'],
                                     num_heads=vit_params['num_heads'],
                                     mlp_ratio=vit_params['mlp_ratio'])

        self.use_decoder = use_decoder

    def forward(self, x):
        n, _, h, w = x.shape
        x = self.vit.hybrid_embed(x)
        cls_token, x = self.vit.forward_encoder(x)
        if self.use_decoder:
            attns_list = self.vit.forward_decoder(x)

        # attns_list = [attn.reshape(n, -1, h, w) for attn in attns_list]

        x = x.reshape(n, h, w, -1).permute(0, 3, 1, 2)
        return x, attns_list


class _Head(nn.Module):
    def __init__(self, nclass, vit_params, c1_channels=256, c4_channels=2048, norm_layer=nn.BatchNorm2d):
        super(_Head, self).__init__()

        last_channels = vit_params['embed_dim']
        nhead = 8
        # decoder
        self.use_decoder = True

        self.trans = Transformer(vit_params, c4_channels=c4_channels, use_decoder=self.use_decoder)


        self.head_mode = 2
        if self.head_mode == 1:
            ############################################################
            hid_dim = 128
            self.conv_c1 = nn.Conv2d(c1_channels, hid_dim, 3, padding=1)
            self.gn_c1 = torch.nn.GroupNorm(8, hid_dim)

            self.lay1 = nn.Conv2d(last_channels+nhead, hid_dim, 3, padding=1)
            self.gn1 = torch.nn.GroupNorm(8, hid_dim)

            self.lay2 = nn.Conv2d(hid_dim, hid_dim, 3, padding=1)
            self.gn2 = torch.nn.GroupNorm(8, hid_dim)

            self.lay3 = nn.Conv2d(hid_dim, hid_dim // 2, 3, padding=1)
            self.gn3 = torch.nn.GroupNorm(8, hid_dim // 2)
            ############################################################
            self.pred = nn.Conv2d(hid_dim // 2, 1, 1)
        elif self.head_mode == 2:
            hid_dim = 64
            self.conv_c1 = _ConvBNReLU(c1_channels, hid_dim, 1, norm_layer=norm_layer)

            self.lay1 = SeparableConv2d(last_channels+nhead, hid_dim, 3,
                                        norm_layer=norm_layer, relu_first=False)

            self.lay2 = SeparableConv2d(hid_dim, hid_dim, 3,
                                        norm_layer=norm_layer, relu_first=False)

            self.lay3 = SeparableConv2d(hid_dim, hid_dim, 3,
                                        norm_layer=norm_layer, relu_first=False)

            self.pred = nn.Conv2d(hid_dim, 1, 1)

        else:
            exit()


    def forward(self, x, c1):

        # transformer
        feat_enc, attns_list = self.trans(x)
        attn_map = attns_list[-1]
        B, nclass, nhead, _ = attn_map.shape
        _, _, H, W = feat_enc.shape
        attn_map = attn_map.reshape(B*nclass, nhead, H, W)

        x = torch.cat([_expand(feat_enc, nclass), attn_map], 1)

        if self.head_mode == 1:
            x = self.lay1(x)
            x = self.gn1(x)
            x = F.relu(x)
            x = self.lay2(x)
            x = self.gn2(x)
            x = F.relu(x)
        elif self.head_mode == 2:
            x = self.lay1(x)
            x = self.lay2(x)

        # 随便写一个head
        size = c1.size()[2:]
        x = F.interpolate(x, size, mode='bilinear', align_corners=True)

        if self.head_mode == 1:
            c1 = F.relu(self.gn_c1(self.conv_c1(c1)))
        elif self.head_mode == 2:
            c1 = self.conv_c1(c1)

        x = x + _expand(c1, nclass)

        if self.head_mode == 1:
            x = self.lay3(x)
            x = self.gn3(x)
            x = F.relu(x)
            x = self.pred(x).reshape(B, nclass, size[0], size[1])
        else:
            x = self.lay3(x)
            x = self.pred(x).reshape(B, nclass, size[0], size[1])

        return x

def _expand(x, nclass):
    return x.unsqueeze(1).repeat(1, nclass, 1, 1, 1).flatten(0, 1)